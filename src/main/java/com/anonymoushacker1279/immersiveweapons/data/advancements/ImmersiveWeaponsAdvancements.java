package com.anonymoushacker1279.immersiveweapons.data.advancements;

import com.anonymoushacker1279.immersiveweapons.ImmersiveWeapons;
import com.anonymoushacker1279.immersiveweapons.init.DeferredRegistryHandler;
import net.minecraft.ChatFormatting;
import net.minecraft.advancements.Advancement;
import net.minecraft.advancements.Advancement.Builder;
import net.minecraft.advancements.AdvancementRewards;
import net.minecraft.advancements.FrameType;
import net.minecraft.advancements.RequirementsStrategy;
import net.minecraft.advancements.critereon.*;
import net.minecraft.core.Registry;
import net.minecraft.network.chat.TranslatableComponent;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Blocks;

import java.util.function.Consumer;

public class ImmersiveWeaponsAdvancements implements Consumer<Consumer<Advancement>> {
	ImmersiveWeaponsAdvancements() {
	}

	/**
	 * Build advancement trees.
	 *
	 * @param consumer the <code>Consumer</code> extending Advancement
	 */
	@Override
	public void accept(Consumer<Advancement> consumer) {
		// Root advancement
		Advancement root = Builder.advancement().display(DeferredRegistryHandler.TESLA_SWORD.get(), new TranslatableComponent("advancements.immersiveweapons.root.title").withStyle(ChatFormatting.RED), new TranslatableComponent("advancements.immersiveweapons.root.description"), new ResourceLocation(ImmersiveWeapons.MOD_ID, "textures/block/red_stained_bulletproof_glass.png"), FrameType.TASK, false, false, false).addCriterion("exist", LocationTrigger.TriggerInstance.located(LocationPredicate.inDimension(Level.OVERWORLD))).save(consumer, "immersiveweapons:root");

		// Molten advancements
		Advancement obtain_molten_shard = Builder.advancement().parent(root).display(DeferredRegistryHandler.MOLTEN_SHARD.get(), new TranslatableComponent("advancements.immersiveweapons.molten_shard.title"), new TranslatableComponent("advancements.immersiveweapons.molten_shard.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_SHARD.get())).save(consumer, "immersiveweapons:molten_shard");
		Advancement smelt_molten_ingot = Builder.advancement().parent(obtain_molten_shard).display(DeferredRegistryHandler.MOLTEN_INGOT.get(), new TranslatableComponent("advancements.immersiveweapons.molten_ingot.title"), new TranslatableComponent("advancements.immersiveweapons.molten_ingot.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_INGOT.get())).save(consumer, "immersiveweapons:molten_ingot");
		Builder.advancement().parent(smelt_molten_ingot).display(DeferredRegistryHandler.MOLTEN_SWORD.get(), new TranslatableComponent("advancements.immersiveweapons.molten_sword.title"), new TranslatableComponent("advancements.immersiveweapons.molten_sword.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_SWORD.get())).rewards(AdvancementRewards.Builder.experience(35)).save(consumer, "immersiveweapons:molten_sword");
		Builder.advancement().parent(smelt_molten_ingot).display(DeferredRegistryHandler.MOLTEN_PICKAXE.get(), new TranslatableComponent("advancements.immersiveweapons.play_with_fire.title"), new TranslatableComponent("advancements.immersiveweapons.play_with_fire.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_SWORD.get(), DeferredRegistryHandler.MOLTEN_PICKAXE.get(), DeferredRegistryHandler.MOLTEN_AXE.get(), DeferredRegistryHandler.MOLTEN_SHOVEL.get(), DeferredRegistryHandler.MOLTEN_HOE.get())).rewards(AdvancementRewards.Builder.experience(100)).save(consumer, "immersiveweapons:play_with_fire");
		Advancement craft_molten_plate = Builder.advancement().parent(smelt_molten_ingot).display(DeferredRegistryHandler.MOLTEN_PLATE.get(), new TranslatableComponent("advancements.immersiveweapons.molten_plate.title"), new TranslatableComponent("advancements.immersiveweapons.molten_plate.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_PLATE.get())).save(consumer, "immersiveweapons:molten_plate");
		Advancement warm_and_toasty = Builder.advancement().parent(craft_molten_plate).display(DeferredRegistryHandler.MOLTEN_HELMET.get(), new TranslatableComponent("advancements.immersiveweapons.warm_and_toasty.title"), new TranslatableComponent("advancements.immersiveweapons.warm_and_toasty.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_HELMET.get(), DeferredRegistryHandler.MOLTEN_CHESTPLATE.get(), DeferredRegistryHandler.MOLTEN_LEGGINGS.get(), DeferredRegistryHandler.MOLTEN_BOOTS.get())).rewards(AdvancementRewards.Builder.experience(100)).save(consumer, "immersiveweapons:warm_and_toasty");
		Builder.advancement().parent(warm_and_toasty).display(Items.LAVA_BUCKET, new TranslatableComponent("advancements.immersiveweapons.lava_bath.title"), new TranslatableComponent("advancements.immersiveweapons.lava_bath.description"), null, FrameType.CHALLENGE, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_HELMET.get(), DeferredRegistryHandler.MOLTEN_CHESTPLATE.get(), DeferredRegistryHandler.MOLTEN_LEGGINGS.get(), DeferredRegistryHandler.MOLTEN_BOOTS.get())).addCriterion("swim", EnterBlockTrigger.TriggerInstance.entersBlock(Blocks.LAVA)).rewards(AdvancementRewards.Builder.experience(35)).save(consumer, "immersiveweapons:lava_bath");

		// Tesla Advancements
		Advancement craft_conductive_alloy = Builder.advancement().parent(root).display(DeferredRegistryHandler.CONDUCTIVE_ALLOY.get(), new TranslatableComponent("advancements.immersiveweapons.conductive_alloy.title"), new TranslatableComponent("advancements.immersiveweapons.conductive_alloy.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.CONDUCTIVE_ALLOY.get())).save(consumer, "immersiveweapons:conductive_alloy");
		Advancement obtain_electric_ingot = Builder.advancement().parent(craft_conductive_alloy).display(DeferredRegistryHandler.ELECTRIC_INGOT.get(), new TranslatableComponent("advancements.immersiveweapons.electric_ingot.title"), new TranslatableComponent("advancements.immersiveweapons.electric_ingot.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.ELECTRIC_INGOT.get())).save(consumer, "immersiveweapons:electric_ingot");
		Advancement craft_tesla_ingot = Builder.advancement().parent(obtain_electric_ingot).display(DeferredRegistryHandler.TESLA_INGOT.get(), new TranslatableComponent("advancements.immersiveweapons.tesla_ingot.title"), new TranslatableComponent("advancements.immersiveweapons.tesla_ingot.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.TESLA_INGOT.get())).save(consumer, "immersiveweapons:tesla_ingot");
		Builder.advancement().parent(craft_tesla_ingot).display(DeferredRegistryHandler.TESLA_SWORD.get(), new TranslatableComponent("advancements.immersiveweapons.tesla_sword.title"), new TranslatableComponent("advancements.immersiveweapons.tesla_sword.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.TESLA_SWORD.get())).rewards(AdvancementRewards.Builder.experience(35)).save(consumer, "immersiveweapons:tesla_sword");
		Builder.advancement().parent(craft_tesla_ingot).display(DeferredRegistryHandler.TESLA_PICKAXE.get(), new TranslatableComponent("advancements.immersiveweapons.energized.title"), new TranslatableComponent("advancements.immersiveweapons.energized.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.TESLA_SWORD.get(), DeferredRegistryHandler.TESLA_PICKAXE.get(), DeferredRegistryHandler.TESLA_AXE.get(), DeferredRegistryHandler.TESLA_SHOVEL.get(), DeferredRegistryHandler.TESLA_HOE.get())).rewards(AdvancementRewards.Builder.experience(100)).save(consumer, "immersiveweapons:energized");
		Builder.advancement().parent(craft_tesla_ingot).display(DeferredRegistryHandler.TESLA_HOE.get(), new TranslatableComponent("advancements.immersiveweapons.rich_no_more.title"), new TranslatableComponent("advancements.immersiveweapons.rich_no_more.description"), null, FrameType.CHALLENGE, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.TESLA_HOE.get())).rewards(AdvancementRewards.Builder.experience(65)).save(consumer, "immersiveweapons:rich_no_more");
		Builder.advancement().parent(craft_tesla_ingot).display(DeferredRegistryHandler.TESLA_HELMET.get(), new TranslatableComponent("advancements.immersiveweapons.tesla_coil.title"), new TranslatableComponent("advancements.immersiveweapons.tesla_coil.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.TESLA_HELMET.get(), DeferredRegistryHandler.TESLA_CHESTPLATE.get(), DeferredRegistryHandler.TESLA_LEGGINGS.get(), DeferredRegistryHandler.TESLA_BOOTS.get())).rewards(AdvancementRewards.Builder.experience(100)).save(consumer, "immersiveweapons:tesla_coil");
		Builder.advancement().parent(craft_tesla_ingot).display(DeferredRegistryHandler.TESLA_SYNTHESIZER.get(), new TranslatableComponent("advancements.immersiveweapons.tesla_synthesizer.title"), new TranslatableComponent("advancements.immersiveweapons.tesla_synthesizer.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.TESLA_SYNTHESIZER.get())).rewards(AdvancementRewards.Builder.experience(150)).save(consumer, "immersiveweapons:tesla_synthesizer");

		// Ventus Advancements
		Advancement obtain_ventus_shard = Builder.advancement().parent(root).display(DeferredRegistryHandler.VENTUS_SHARD.get(), new TranslatableComponent("advancements.immersiveweapons.ventus_shard.title"), new TranslatableComponent("advancements.immersiveweapons.ventus_shard.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.VENTUS_SHARD.get())).save(consumer, "immersiveweapons:ventus_shard");
		Builder.advancement().parent(obtain_ventus_shard).display(DeferredRegistryHandler.VENTUS_SWORD.get(), new TranslatableComponent("advancements.immersiveweapons.ventus_sword.title"), new TranslatableComponent("advancements.immersiveweapons.ventus_sword.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.VENTUS_SWORD.get())).rewards(AdvancementRewards.Builder.experience(35)).save(consumer, "immersiveweapons:ventus_sword");
		Builder.advancement().parent(obtain_ventus_shard).display(DeferredRegistryHandler.VENTUS_PICKAXE.get(), new TranslatableComponent("advancements.immersiveweapons.pretty_windy.title"), new TranslatableComponent("advancements.immersiveweapons.pretty_windy.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.VENTUS_SWORD.get(), DeferredRegistryHandler.VENTUS_PICKAXE.get(), DeferredRegistryHandler.VENTUS_AXE.get(), DeferredRegistryHandler.VENTUS_SHOVEL.get(), DeferredRegistryHandler.VENTUS_HOE.get())).rewards(AdvancementRewards.Builder.experience(100)).save(consumer, "immersiveweapons:pretty_windy");
		Builder.advancement().parent(obtain_ventus_shard).display(DeferredRegistryHandler.VENTUS_HELMET.get(), new TranslatableComponent("advancements.immersiveweapons.almost_flying.title"), new TranslatableComponent("advancements.immersiveweapons.almost_flying.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.VENTUS_HELMET.get(), DeferredRegistryHandler.VENTUS_CHESTPLATE.get(), DeferredRegistryHandler.VENTUS_LEGGINGS.get(), DeferredRegistryHandler.VENTUS_BOOTS.get())).rewards(AdvancementRewards.Builder.experience(100)).save(consumer, "immersiveweapons:almost_flying");
		Advancement craft_ventus_staff_core = Builder.advancement().parent(obtain_ventus_shard).display(DeferredRegistryHandler.VENTUS_STAFF_CORE.get(), new TranslatableComponent("advancements.immersiveweapons.ventus_staff_core.title"), new TranslatableComponent("advancements.immersiveweapons.ventus_staff_core.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.VENTUS_STAFF_CORE.get())).save(consumer, "immersiveweapons:ventus_staff_core");
		Builder.advancement().parent(craft_ventus_staff_core).display(DeferredRegistryHandler.VENTUS_STAFF.get(), new TranslatableComponent("advancements.immersiveweapons.ventus_staff.title"), new TranslatableComponent("advancements.immersiveweapons.ventus_staff.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.VENTUS_STAFF.get())).rewards(AdvancementRewards.Builder.experience(35)).save(consumer, "immersiveweapons:ventus_staff");

		// Tool advancements
		Advancement craft_tool_rod = Builder.advancement().parent(root).display(DeferredRegistryHandler.WOOD_TOOL_ROD.get(), new TranslatableComponent("advancements.immersiveweapons.tool_rod.title"), new TranslatableComponent("advancements.immersiveweapons.tool_rod.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.WOOD_TOOL_ROD.get())).save(consumer, "immersiveweapons:tool_rod");
		Builder.advancement().parent(craft_tool_rod).display(DeferredRegistryHandler.IRON_PIKE.get(), new TranslatableComponent("advancements.immersiveweapons.pike.title"), new TranslatableComponent("advancements.immersiveweapons.pike.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.WOOD_PIKE.get())).addCriterion("hold1", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.STONE_PIKE.get())).addCriterion("hold2", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.IRON_PIKE.get())).addCriterion("hold3", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.COPPER_PIKE.get())).addCriterion("hold4", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.GOLD_PIKE.get())).addCriterion("hold5", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.DIAMOND_PIKE.get())).addCriterion("hold6", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.NETHERITE_PIKE.get())).requirements(RequirementsStrategy.OR).save(consumer, "immersiveweapons:pike");

		Builder.advancement().parent(root).display(DeferredRegistryHandler.STONE_SHARD.get(), new TranslatableComponent("advancements.immersiveweapons.shards.title"), new TranslatableComponent("advancements.immersiveweapons.shards.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLTEN_SHARD.get())).addCriterion("hold1", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.OBSIDIAN_SHARD.get())).addCriterion("hold2", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.STONE_SHARD.get())).addCriterion("hold3", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.WOOD_SHARD.get())).addCriterion("hold4", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.DIAMOND_SHARD.get())).addCriterion("hold5", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.VENTUS_SHARD.get())).requirements(RequirementsStrategy.OR).save(consumer, "immersiveweapons:shards");
		Builder.advancement().parent(root).display(DeferredRegistryHandler.NETHERITE_ARROW.get(), new TranslatableComponent("advancements.immersiveweapons.netherite_projectile.title"), new TranslatableComponent("advancements.immersiveweapons.netherite_projectile.description"), null, FrameType.CHALLENGE, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.NETHERITE_ARROW.get())).addCriterion("hold1", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.NETHERITE_MUSKET_BALL.get())).rewards(AdvancementRewards.Builder.experience(50)).save(consumer, "immersiveweapons:netherite_projectile");

		Advancement craft_blank_blueprint = Builder.advancement().parent(root).display(DeferredRegistryHandler.BLANK_BLUEPRINT.get(), new TranslatableComponent("advancements.immersiveweapons.blueprint.title"), new TranslatableComponent("advancements.immersiveweapons.blueprint.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.BLANK_BLUEPRINT.get())).save(consumer, "immersiveweapons:blueprint");
		Builder.advancement().parent(craft_blank_blueprint).display(DeferredRegistryHandler.FLINTLOCK_PISTOL.get(), new TranslatableComponent("advancements.immersiveweapons.flintlock_pistol.title"), new TranslatableComponent("advancements.immersiveweapons.flintlock_pistol.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.FLINTLOCK_PISTOL.get())).save(consumer, "immersiveweapons:flintlock_pistol");
		Builder.advancement().parent(craft_blank_blueprint).display(DeferredRegistryHandler.BLUNDERBUSS.get(), new TranslatableComponent("advancements.immersiveweapons.blunderbuss.title"), new TranslatableComponent("advancements.immersiveweapons.blunderbuss.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.BLUNDERBUSS.get())).save(consumer, "immersiveweapons:blunderbuss");
		Builder.advancement().parent(craft_blank_blueprint).display(DeferredRegistryHandler.SMOKE_BOMB.get(), new TranslatableComponent("advancements.immersiveweapons.smoke_bomb.title"), new TranslatableComponent("advancements.immersiveweapons.smoke_bomb.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.SMOKE_BOMB.get())).save(consumer, "immersiveweapons:smoke_bomb");

		Advancement craft_alcohol = Builder.advancement().parent(root).display(DeferredRegistryHandler.BOTTLE_OF_ALCOHOL.get(), new TranslatableComponent("advancements.immersiveweapons.bottle_of_alcohol.title"), new TranslatableComponent("advancements.immersiveweapons.bottle_of_alcohol.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.BOTTLE_OF_ALCOHOL.get())).save(consumer, "immersiveweapons:bottle_of_alcohol");
		Builder.advancement().parent(craft_alcohol).display(DeferredRegistryHandler.MOLOTOV_COCKTAIL.get(), new TranslatableComponent("advancements.immersiveweapons.molotov_cocktail.title"), new TranslatableComponent("advancements.immersiveweapons.molotov_cocktail.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.MOLOTOV_COCKTAIL.get())).save(consumer, "immersiveweapons:molotov_cocktail");

		Advancement craft_bandage = Builder.advancement().parent(root).display(DeferredRegistryHandler.BANDAGE.get(), new TranslatableComponent("advancements.immersiveweapons.bandage.title"), new TranslatableComponent("advancements.immersiveweapons.bandage.description"), null, FrameType.TASK, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.BANDAGE.get())).save(consumer, "immersiveweapons:bandage");
		Builder.advancement().parent(craft_bandage).display(DeferredRegistryHandler.FIRST_AID_KIT.get(), new TranslatableComponent("advancements.immersiveweapons.first_aid_kit.title"), new TranslatableComponent("advancements.immersiveweapons.first_aid_kit.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.FIRST_AID_KIT.get())).save(consumer, "immersiveweapons:first_aid_kit");

		// Other advancements
		Builder.advancement().parent(root).display(DeferredRegistryHandler.USED_SYRINGE.get(), new TranslatableComponent("advancements.immersiveweapons.used_syringe.title"), new TranslatableComponent("advancements.immersiveweapons.used_syringe.description"), null, FrameType.CHALLENGE, true, true, true).addCriterion("hold", KilledTrigger.TriggerInstance.entityKilledPlayer(EntityPredicate.ANY, DamageSourcePredicate.Builder.damageType().source(EntityPredicate.Builder.entity().equipment(EntityEquipmentPredicate.Builder.equipment().mainhand(ItemPredicate.Builder.item().of(DeferredRegistryHandler.USED_SYRINGE.get()).build()).build())))).save(consumer, "immersiveweapons:used_syringe");

		Builder.advancement().parent(root).display(DeferredRegistryHandler.BEAR_TRAP.get(), new TranslatableComponent("advancements.immersiveweapons.traps.title"), new TranslatableComponent("advancements.immersiveweapons.traps.description"), null, FrameType.GOAL, true, true, false).addCriterion("hold", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.BEAR_TRAP.get())).addCriterion("hold1", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.PUNJI_STICKS.get())).addCriterion("hold2", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.LANDMINE.get())).addCriterion("hold3", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.BEAR_TRAP.get())).addCriterion("hold4", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.BARBED_WIRE.get())).addCriterion("hold5", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.SPIKE_TRAP.get())).addCriterion("hold6", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.PITFALL.get())).addCriterion("hold7", InventoryChangeTrigger.TriggerInstance.hasItems(DeferredRegistryHandler.WOODEN_SPIKES.get())).requirements(RequirementsStrategy.OR).save(consumer, "immersiveweapons:traps");

		// Location advancements
		// Builder.advancement().parent(root).display(Blocks.MOSSY_STONE_BRICKS, new TranslatableComponent("advancements.immersiveweapons.abandoned_factory.title"), new TranslatableComponent("advancements.immersiveweapons.abandoned_factory.description"), null, FrameType.TASK, true, true, false).addCriterion("visit", LocationTrigger.TriggerInstance.located(LocationPredicate.inFeature(Structures.ABANDONED_FACTORY.get()))).rewards(AdvancementRewards.Builder.experience(50)).save(consumer, "immersiveweapons:abandoned_factory");
		Builder.advancement().parent(root).display(Blocks.SKELETON_SKULL, new TranslatableComponent("advancements.immersiveweapons.battlefield.title"), new TranslatableComponent("advancements.immersiveweapons.battlefield.description"), null, FrameType.TASK, true, true, false).addCriterion("visit", LocationTrigger.TriggerInstance.located(LocationPredicate.inBiome(ResourceKey.create(Registry.BIOME_REGISTRY, new ResourceLocation(ImmersiveWeapons.MOD_ID, "battlefield"))))).rewards(AdvancementRewards.Builder.experience(50)).save(consumer, "immersiveweapons:battlefield");
		// Builder.advancement().parent(visit_battlefield).display(Blocks.CAMPFIRE, new TranslatableComponent("advancements.immersiveweapons.battlefield_camp.title"), new TranslatableComponent("advancements.immersiveweapons.battlefield_camp.description"), null, FrameType.TASK, true, true, false).addCriterion("visit", LocationTrigger.TriggerInstance.located(LocationPredicate.inFeature(Structures.BATTLEFIELD_CAMP.get()))).rewards(AdvancementRewards.Builder.experience(50)).save(consumer, "immersiveweapons:battlefield_camp");
	}
}