plugins {
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.spongepowered.mixin' version '0.7.+'
	id 'idea'
}

repositories {
	mavenLocal()
	maven {
		name "AnonymousHacker1279"
		url "https://maven.anonymoushacker1279.tech/releases"
	}
	maven {
		name "Jared's Maven"
		url 'https://maven.blamejared.com'
	}
	maven {
		name "ModMaven"
		url "https://modmaven.dev/"
	}
	maven {
		name "Maven Central"
		url "https://repo.maven.apache.org/maven2"
	}
	maven {
		name "Bai Maven"
		url "https://maven2.bai.lol"
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

version = mod_version
group = mod_group_id

base {
	archivesName = "immersiveweapons"
}

apply plugin: 'org.spongepowered.mixin'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: mappings_channel, version: mappings_version

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	copyIdeResources = true

	runs {
		configureEach {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			jvmArgs '-Xmx6G', '-XX:+AllowEnhancedClassRedefinition'

			mods {
				"immersiveweapons" {
					source sourceSets.main
				}
			}
		}


		client {
			args '--uuid', '94f11dac-d1bc-46da-877b-c69f533f2da2'
		}

		server {
			args '--nogui'
		}

		data {
			args '--mod', 'immersiveweapons', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			jvmArgs '-Xmx4G', '-XX:+AllowEnhancedClassRedefinition'
		}
	}
}

// Include resources generated by data generators
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	implementation 'org.jetbrains:annotations:24.0.1'

	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	// Apply Mixin AP
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

	// Include TerraBlender
	implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${terrablender_version}")
	// Include Immersive Weapons Compatibility Bridge (IWCB)
	implementation fg.deobf("tech.anonymoushacker1279.iwcompatbridge:IWCompatBridge:${iwcb_version}")

	// Include JEI
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
	// Include WTHIT and badpackets
	runtimeOnly fg.deobf("mcp.mobius.waila:wthit:forge-${wthit_version}")
	implementation fg.deobf("lol.bai:badpackets:forge-${badpackets_version}")
	// Include AttributeFix
	implementation fg.deobf("curse.maven:attributefix-280510:${attributefix_version}")
}

tasks.named('processResources', ProcessResources).configure {
	def replaceProperties = [
			minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
			forge_version       : forge_version, forge_version_range: forge_version_range,
			loader_version_range: loader_version_range, mod_version: mod_version
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml']) {
		expand replaceProperties + [project: project]
	}
}

java {
	withSourcesJar()
	withJavadocJar()
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : "immersiveweapons",
				'Specification-Vendor'    : "AnonymousHacker1279",
				'Specification-Version'   : '1',
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : "AnonymousHacker1279",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs"            : "mixins.immersiveweapons.json"
		])
	}

	finalizedBy 'reobfJar'
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name "AnonymousHacker1279"

			def baseMavenUrl = "https://maven.anonymoushacker1279.tech/"
			url mod_version.contains("SNAPSHOT") ? baseMavenUrl + "snapshots" : baseMavenUrl + "releases"

			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

mixin {
	add sourceSets.main, "mixins.immersiveweapons.refmap.json"
	config "mixins.immersiveweapons.json"

	debug.verbose = true
	debug.export = true
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	options.fork = true // Use a separate JVM process for Java compilation
}