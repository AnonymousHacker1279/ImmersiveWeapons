plugins {
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '5.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

repositories {
	maven {
		name "AnonymousHacker1279"
		url "https://maven.anonymoushacker1279.tech/releases"
	}
	maven {
		name "Jared's Maven"
		url 'https://maven.blamejared.com'
	}
	maven {
		name "ModMaven"
		url "https://modmaven.dev/"
	}
	maven {
		name "Maven Central"
		url "https://repo.maven.apache.org/maven2"
	}
	maven {
		name "Bai Maven"
		url "https://maven.bai.lol"
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: mappings_channel, version: mappings_version

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			// For some dependencies to work in-dev
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			jvmArgs '-Xmx6G', '-XX:+UseShenandoahGC'

			mods {
				immersiveweapons {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			// For some dependencies to work in-dev
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			jvmArgs '-Xmx6G', '-XX:+UseShenandoahGC'

			mods {
				immersiveweapons {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			// For some dependencies to work in-dev
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			args '--mod', 'immersiveweapons', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			jvmArgs '-Xmx4G', '-XX:+UseShenandoahGC'

			mods {
				immersiveweapons {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	implementation 'org.jetbrains:annotations:23.0.0'

	minecraft "net.minecraftforge:forge:${forge_version}"

	// Include TerraBlender
	implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${terrablender_version}")

	// Include Immersive Weapons Compatibility Bridge (IWCB)
	// runtimeOnly fg.deobf("tech.anonymoushacker1279.iwcompatbridge:IWCompatBridge:${iwcb_version}")
	// Include JEI
	runtimeOnly fg.deobf("mezz.jei:jei-1.19.3-forge:${jei_version}")
	// Include WTHIT and badpackets
	runtimeOnly fg.deobf("mcp.mobius.waila:wthit:forge-${wthit_version}")
	implementation fg.deobf("lol.bai:badpackets:forge-${badpackets_version}")
	// Include MmmMmmMmmMmm (Target Dummy)
	// runtimeOnly fg.deobf("curse.maven:mmmmmmmmmmmm-225738:${target_dummy_version}") //   TODO: Uncomment when ported to 1.19.3
}

java {
	withSourcesJar()
	withJavadocJar()
}

// Add properties to JAR manifest
jar {
	manifest {
		attributes([
				"Specification-Title"     : "immersiveweapons",
				"Specification-Vendor"    : "anonymoushacker1279",
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : "anonymoushacker1279",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

jar.finalizedBy('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		repositories {
			maven {
				name "AnonymousHacker1279"

				def baseMavenUrl = "https://maven.anonymoushacker1279.tech/"
				url version.contains("SNAPSHOT") ? baseMavenUrl + "snapshots" : baseMavenUrl + "releases"

				credentials(PasswordCredentials)
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	options.fork = true // Use a separate JVM process for Java compilation
}