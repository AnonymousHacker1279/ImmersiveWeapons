plugins {
	id 'java-library'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '2.0.88'
	id "com.hypherionmc.modutils.modpublisher" version "2.1.6"
	id 'idea'
}

apply from: 'optimization_utils.gradle'

tasks.named('wrapper', Wrapper).configure {
	distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
	mavenLocal()
	maven {
		name "AnonymousHacker1279"
		url "https://maven.anonymoushacker1279.tech/releases"
	}
	maven {
		name "Forge"
		url "https://maven.minecraftforge.net/"
	}
	maven {
		name "Bai Maven"
		url "https://maven2.bai.lol"
	}
	maven {
		name "AzureDoom's Maven"
		url 'https://maven.azuredoom.com/mods'
	}
	maven {
		name "Jared's maven"
		url "https://maven.blamejared.com/"
	}
}

base {
	archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println('Java: ' + System.getProperty('java.version') + ' | JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ') | Arch: ' + System.getProperty('os.arch'))

sourceSets {
	main {
		resources {
			// Include resources generated by data generators.
			srcDirs += "src/generated/resources"
		}
	}
	generated

	// Separate datagen sourceSet from main to shrink the build jar
	datagen {
		compileClasspath += main.output
	}
}

configurations {
	extendConfigurations(implementation, datagenImplementation)
	extendConfigurations(compileOnly, datagenCompileOnly)
	extendConfigurations(runtimeOnly, datagenRuntimeOnly)
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
	for (configuration in configurations) {
		configuration.extendsFrom(base)
	}
}

neoForge {
	version = project.neo_version
	addModdingDependenciesTo sourceSets.datagen

	parchment {
		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_minecraft_version
	}

	runs {
		client {
			client()
			devLogin = true
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		gameTestServer {
			type = "gameTestServer"
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		clientData {
			clientData()

			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}

		configureEach {
			systemProperty 'forge.logging.markers', 'REGISTRIES'
			logLevel = org.slf4j.event.Level.DEBUG

			// If the selected toolchain is a JBR, enable DCEVM for improved hotswapping
			if (it.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
				jvmArguments.addAll '-XX:+AllowEnhancedClassRedefinition', '-XX:NonProfiledCodeHeapSize=256M', '-XX:ReservedCodeCacheSize=300M'
			}

			systemProperties.put('terminal.jline', "true")
		}
	}

	mods {
		"${mod_id}" {
			sourceSet(sourceSets.main)
			sourceSet(sourceSets.datagen)
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources {
	srcDir 'src/generated/resources'
	exclude ".cache"
}

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	implementation 'org.jetbrains:annotations:26.0.2'

	implementation(jarJar("com.github.glitchfiend:TerraBlender-neoforge:[${terrablender_version}]")) {
		version {
			prefer terrablender_version
		}
	}

	implementation(jarJar("net.kyrptonaught.customportalapi:cpapireforged-neo-${minecraft_version}:[${custom_portals_api_version},)")) {
		version {
			prefer custom_portals_api_version
		}
	}

	// Include Immersive Weapons Compatibility Bridge (IWCB)
	implementation "tech.anonymoushacker1279.iwcompatbridge:IWCompatBridge:${iwcb_version}"

	// Include WTHIT and badpackets
	runtimeOnly "mcp.mobius.waila:wthit:neo-${wthit_version}"
	runtimeOnly "lol.bai:badpackets:neo-${badpackets_version}"

	// Include JEI
	compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
	runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

tasks.named("processResources", ProcessResources).configure {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			neo_version            : neo_version,
			neo_version_range      : neo_version_range,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_version            : mod_version
	]

	inputs.properties replaceProperties
	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand(replaceProperties)
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

java {
	withSourcesJar()
	withJavadocJar()
}

tasks.named('sourcesJar', Jar).configure {
	from sourceSets.main.allSource
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name "AnonymousHacker1279"

			String baseMavenUrl = "https://maven.anonymoushacker1279.tech/"
			url mod_version.contains("SNAPSHOT") ? baseMavenUrl + "snapshots" : baseMavenUrl + "releases"

			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

if (file("RELEASE_NOTES.md").exists()) {
	publisher {
		apiKeys {
			// Load API keys from tokens.properties file
			Properties tokens = new Properties()
			file("tokens.properties").withInputStream {
				stream -> tokens.load(stream)
			}

			curseforge = tokens.getProperty("curseforge")
			modrinth = tokens.getProperty("modrinth")
		}

		setDebug(false)
		setCurseID("494454")
		setModrinthID("QZFdnUQ5")
		setGithubRepo("AnonymousHacker1279/ImmersiveWeapons")
		setVersionType("release")
		// Read the contents of the RELEASE_NOTES.md file
		setChangelog(file("RELEASE_NOTES.md").text)
		// Get the IW version from the mod_version variable, it's the last part of the version string
		setVersion("v" + mod_version.split("-")[1])
		setDisplayName("Immersive Weapons - v" + mod_version.split("-")[1])
		setGameVersions([minecraft_version])
		setLoaders("neoforge")
		setCurseEnvironment("both")
		setArtifact(tasks.jar)
		setJavaVersions([JavaVersion.VERSION_21])
		addAdditionalFile(javadocJar, sourcesJar)

		curseDepends {
			optional "immersive-weapons-compatibility-bridge"
			embedded 'terrablender-neoforge', 'custom-portal-api-reforged'
		}

		modrinthDepends {
			optional "immersive-weapons-compatibility-bridge"
			embedded 'terrablender', 'custom-portal-api-reforged'
		}
	}
} else {
	println("No RELEASE_NOTES.md found, publishing outside of Maven is disabled.")
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}