plugins {
	id 'java-library'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '[7.0.33, 7.1.0)'
	// id 'org.parchmentmc.librarian.forgegradle' version '1.+' TODO: Uncomment when Librarian is updated
	id "me.hypherionmc.modutils.modpublisher" version "1.0.20"
	id 'idea'
}

repositories {
	mavenLocal()
	maven {
		name "AnonymousHacker1279"
		url "https://maven.anonymoushacker1279.tech/releases"
	}
	maven {
		name "Jared's Maven"
		url 'https://maven.blamejared.com'
	}
	maven {
		name "ModMaven"
		url "https://modmaven.dev/"
	}
	maven {
		name "Maven Central"
		url "https://repo.maven.apache.org/maven2"
	}
	maven {
		name "Bai Maven"
		url "https://maven2.bai.lol"
	}
	maven {
		name "FabricMC Maven"
		url "https://maven.fabricmc.net/"
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

version = mod_version
group = mod_group_id

base {
	archivesName = project.mod_id
}

jarJar.enable()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'

		jvmArguments.addAll '-Xmx6G', '-XX:+AllowEnhancedClassRedefinition'

		modSource project.sourceSets.main
	}

	client {
	}

	server {
		programArgument '--nogui'
	}

	data {
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

// Include resources generated by data generators
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	implementation 'org.jetbrains:annotations:24.0.1'

	implementation "net.neoforged:neoforge:${neoforge_version}"

	implementation(jarJar("io.github.llamalad7:mixinextras-neoforge:0.2.0")) {
		jarJar.ranged(it, "[0.2.0,)")
	}

	// TODO: Uncomment once dependencies update

	// Include TerraBlender
	// implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${terrablender_version}")
	// Include Immersive Weapons Compatibility Bridge (IWCB)
	// implementation fg.deobf("tech.anonymoushacker1279.iwcompatbridge:IWCompatBridge:${iwcb_version}")

	// Include JEI
	// runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
	// Include WTHIT and badpackets
	// runtimeOnly fg.deobf("mcp.mobius.waila:wthit:forge-${wthit_version}")
	// implementation fg.deobf("lol.bai:badpackets:forge-${badpackets_version}")
	// Include AttributeFix
	// implementation fg.deobf("curse.maven:attributefix-280510:${attributefix_version}")
	// Include Debug Utils
	// runtimeOnly fg.deobf("curse.maven:debug-utils-forge-783008:4644077")
}

tasks.named('processResources', ProcessResources).configure {
	def replaceProperties = [
			minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
			neoforge_version    : neoforge_version, neoforge_version_range: neoforge_version_range,
			loader_version_range: loader_version_range, mod_version: mod_version
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml']) {
		expand replaceProperties + [project: project]
	}
}

java {
	withSourcesJar()
	withJavadocJar()
}

tasks.named('jar', Jar).configure {
	archiveClassifier = "slim"
	manifest {
		attributes([
				'Specification-Title'     : "immersiveweapons",
				'Specification-Vendor'    : "AnonymousHacker1279",
				'Specification-Version'   : '1',
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : "AnonymousHacker1279",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs"            : "mixins.immersiveweapons.json"
		])
	}
}

tasks.jarJar.configure {
	archiveClassifier = ""
}

tasks.named('build').configure {
	dependsOn('jarJar')
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives tasks.jarJar
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
			artifact tasks.jarJar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name "AnonymousHacker1279"

			def baseMavenUrl = "https://maven.anonymoushacker1279.tech/"
			url mod_version.contains("SNAPSHOT") ? baseMavenUrl + "snapshots" : baseMavenUrl + "releases"

			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

if (file("RELEASE_NOTES.md").exists()) {
	publisher {
		apiKeys {
			// Load API keys from tokens.properties file
			def tokens = new Properties()
			file("tokens.properties").withInputStream {
				stream -> tokens.load(stream)
			}

			curseforge = tokens.getProperty("curseforge")
			modrinth = tokens.getProperty("modrinth")
		}

		debug = false
		curseID = 494454
		modrinthID = "QZFdnUQ5"
		githubRepo = "AnonymousHacker1279/ImmersiveWeapons"
		versionType = "release"
		// Read the contents of the RELEASE_NOTES.md file
		changelog = file("RELEASE_NOTES.md").text
		// Get the IW version from the mod_version variable, it's the last part of the version string
		version = "v" + mod_version.split("-")[1]
		displayName = "Immersive Weapons - " + version
		gameVersions = [minecraft_version]
		loaders = ["forge", "neoforge"]
		curseEnvironment = "both"
		artifact = tasks.jarJar
		additionalFiles = [javadocJar, sourcesJar]

		curseDepends {
			required = ["terrablender"]
			optional = ["immersive-weapons-compatibility-bridge", "attributefix"]
		}

		modrinthDepends {
			required = ["kkmrDlKT"]
			optional = ["SAUGybfH", "lOOpEntO"]
		}
	}
} else {
	println("No RELEASE_NOTES.md found, publishing outside of Maven is disabled.")
}

tasks.named('javadoc', Javadoc).configure {
	options {
		tags = [
				'reason:a:Mixin Reason'
		]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	options.fork = true // Use a separate JVM process for Java compilation
}