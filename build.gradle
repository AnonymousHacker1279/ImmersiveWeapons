plugins {
	id 'maven-publish'
	id 'net.neoforged.gradle' version '[6.0.18, 6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.spongepowered.mixin' version '0.7.+'
	id "me.hypherionmc.modutils.modpublisher" version "1.0.20"
	id 'idea'
}


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.security.MessageDigest

repositories {
	mavenLocal()
	maven {
		name "AnonymousHacker1279"
		url "https://maven.anonymoushacker1279.tech/releases"
	}
	maven {
		name "Jared's Maven"
		url 'https://maven.blamejared.com'
	}
	maven {
		name "ModMaven"
		url "https://modmaven.dev/"
	}
	maven {
		name "Maven Central"
		url "https://repo.maven.apache.org/maven2"
	}
	maven {
		name "Bai Maven"
		url "https://maven2.bai.lol"
	}
	maven {
		name "FabricMC Maven"
		url "https://maven.fabricmc.net/"
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

version = mod_version
group = mod_group_id

base {
	archivesName = "immersiveweapons"
}

apply plugin: 'org.spongepowered.mixin'

jarJar.enable()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
	main {
		resources {
			// Include resources generated by data generators.
			srcDirs += "src/generated/resources"
		}
	}
	generated

	datagen
}

// Include resources generated by data generators
sourceSets.main.resources {
	srcDir 'src/generated/resources'
	exclude '.cache/'
}

minecraft {
	mappings channel: mappings_channel, version: mappings_version

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	copyIdeResources = true

	runs {
		configureEach {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			jvmArgs '-Xmx6G', '-XX:+AllowEnhancedClassRedefinition'

			ideaModule "${project.name}.main"
			mods {
				"immersiveweapons" {
					source sourceSets.main
				}
			}
		}

		client {
		}

		server {
			args '--nogui'
		}

		data {
			args '--mod', "immersiveweapons", '--all'
			args '--output', file('src/generated/resources/')
			args '--existing', file('src/main/resources/')

			ideaModule "${project.name}.datagen"
			mods {
				"immersiveweapons" {
					sources sourceSets.main, sourceSets.datagen
				}
			}
		}
	}
}

configurations {
	datagenImplementation.extendsFrom implementation
}

dependencies {
	implementation 'org.jetbrains:annotations:24.0.1'

	minecraft "net.neoforged:forge:${minecraft_version}-${neoforge_version}"

	datagenImplementation sourceSets.main.output

	// Apply Mixin and MixinExtras AP
	implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
	implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) {
		jarJar.ranged(it, "[0.3.0,)")
	}

	annotationProcessor "net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5"

	// Include TerraBlender
	implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${terrablender_version}")
	// Include Immersive Weapons Compatibility Bridge (IWCB)
	implementation fg.deobf("tech.anonymoushacker1279.iwcompatbridge:IWCompatBridge:${iwcb_version}")

	// Include JEI
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
	// Include WTHIT and badpackets
	runtimeOnly fg.deobf("mcp.mobius.waila:wthit:forge-${wthit_version}")
	implementation fg.deobf("lol.bai:badpackets:forge-${badpackets_version}")
	// Include AttributeFix
	implementation fg.deobf("curse.maven:attributefix-280510:${attributefix_version}")
	// Include Debug Utils
	runtimeOnly fg.deobf("curse.maven:debug-utils-forge-783008:4644077")
}

tasks.named('processResources', ProcessResources).configure {
	def replaceProperties = [
			minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
			neoforge_version    : neoforge_version, neoforge_version_range: neoforge_version_range,
			loader_version_range: loader_version_range, mod_version: mod_version
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml']) {
		expand replaceProperties + [project: project]
	}

	// Minify JSON files
	doLast {
		def minifyStart = System.currentTimeMillis()
		def filesMinified = 0
		def bytesSaved = 0

		fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			filesMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			bytesSaved += (oldLength - file.length())
		}

		// Format the bytes saved to KB, and add commas
		bytesSaved = String.format("%,d", (bytesSaved / 1024).toLong())

		println('Minified ' + filesMinified + ' JSON files, saving ' + bytesSaved + ' KB. Took ' + (System.currentTimeMillis() - minifyStart) + 'ms.')
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

java {
	withSourcesJar()
	withJavadocJar()
}

reobf.create('jarJar')

tasks.named('sourcesJar', Jar).configure {
	from sourceSets.main.allSource
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('jar', Jar).configure {
	archiveClassifier = "slim"
	manifest {
		attributes([
				'Specification-Title'     : "immersiveweapons",
				'Specification-Vendor'    : "AnonymousHacker1279",
				'Specification-Version'   : '1',
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : "AnonymousHacker1279",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs"            : "mixins.immersiveweapons.json"
		])
	}

	finalizedBy 'reobfJar'
}

tasks.jarJar.configure {
	archiveClassifier = ""
	finalizedBy('reobfJarJar')
}

build.dependsOn tasks.jarJar

artifacts {
	archives javadocJar
	archives sourcesJar
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
			artifact tasks.jarJar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name "AnonymousHacker1279"

			def baseMavenUrl = "https://maven.anonymoushacker1279.tech/"
			url mod_version.contains("SNAPSHOT") ? baseMavenUrl + "snapshots" : baseMavenUrl + "releases"

			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

if (file("RELEASE_NOTES.md").exists()) {
	publisher {
		apiKeys {
			// Load API keys from tokens.properties file
			def tokens = new Properties()
			file("tokens.properties").withInputStream {
				stream -> tokens.load(stream)
			}

			curseforge = tokens.getProperty("curseforge")
			modrinth = tokens.getProperty("modrinth")
		}

		debug = false
		curseID = 494454
		modrinthID = "QZFdnUQ5"
		githubRepo = "AnonymousHacker1279/ImmersiveWeapons"
		versionType = "release"
		// Read the contents of the RELEASE_NOTES.md file
		changelog = file("RELEASE_NOTES.md").text
		// Get the IW version from the mod_version variable, it's the last part of the version string
		version = "v" + mod_version.split("-")[1]
		displayName = "Immersive Weapons - " + version
		gameVersions = [minecraft_version]
		loaders = ["forge", "neoforge"]
		curseEnvironment = "both"
		artifact = tasks.jarJar
		additionalFiles = [javadocJar, sourcesJar]

		curseDepends {
			required = ["terrablender"]
			optional = ["immersive-weapons-compatibility-bridge", "attributefix"]
		}

		modrinthDepends {
			required = ["kkmrDlKT"]
			optional = ["SAUGybfH", "lOOpEntO"]
		}
	}
} else {
	println("No RELEASE_NOTES.md found, publishing outside of Maven is disabled.")
}

tasks.named('javadoc', Javadoc).configure {
	options {
		tags = [
				'reason:a:Mixin Reason'
		]
	}
}

mixin {
	add sourceSets.main, "mixins.immersiveweapons.refmap.json"
	config "mixins.immersiveweapons.json"

	debug.verbose = true
	debug.export = true
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	options.fork = true // Use a separate JVM process for Java compilation
}

void minimizePNGFile(File file) {
	long size = file.length()
	exec {
		executable "optipng"
		args "-q", "-o7", "-zm1-9", "-strip", "all", file
	}
	long newSize = file.length()
	if (newSize < size) {
		System.out.format("Reduced file size of %s from %d bytes to %d bytes (reduced by %.2f%%)\n",
				file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0)
	}
}

static def calculateMD5Hash(File file) {
	MessageDigest md = MessageDigest.getInstance("MD5")
	file.withInputStream { md.update(it.bytes) }
	byte[] digest = md.digest()
	return digest.collect { String.format("%02x", it) }.join()
}

tasks.register('optimizePng').configure {
	doLast {
		try {
			exec {
				commandLine "optipng", "-v"
			}
			// OptiPNG is available, continue with the task
			def pngPatterns = ["**/*.png"]

			// Load cache with file hashes, to avoid re-optimizing files that are untouched
			def cache = [:]
			if (file(".optimizePngCache").exists()) {
				cache = new JsonSlurper().parse(file(".optimizePngCache"))
				println("Loaded " + cache.size() + " entries from cache.")
			} else {
				file(".optimizePngCache").createNewFile()
			}

			// Minimize any PNGs found
			def originalSize = 0
			def newSize = 0
			def imagesMinimized = 0

			for (dir in sourceSets.main.resources.srcDirs) {
				fileTree(dir: dir, includes: pngPatterns).each {
					// Skip files that are already optimized
					if (cache.containsKey(it.path) && cache[it.path] == calculateMD5Hash(it)) {
						return
					} else {
						imagesMinimized++
						originalSize += it.length()
						minimizePNGFile(it)
						newSize += it.length()

						// Update the cache with the new file hash
						cache[it.path] = calculateMD5Hash(it)
					}
				}
			}

			if (imagesMinimized > 0) {
				// Format the bytes saved to KB, and add commas
				def bytesSaved = String.format("%,d", ((originalSize - newSize) / 1024).toLong())
				println("Minimized " + imagesMinimized + " PNGs, saving " + bytesSaved + " KB.")

				// Save the cache
				file(".optimizePngCache").text = JsonOutput.toJson(cache)
				println("Saved " + cache.size() + " entries to cache.")
			} else {
				println("No PNGs were optimized.")
			}
		} catch (Exception e) {
			// OptiPNG is not available
			println("An error occurred while attempting to optimize PNGs.")
			println("OptiPNG may not be available. Please consider installing OptiPNG, and ensure it is added to your PATH.")
			println("https://optipng.sourceforge.net/")
		}
	}
}